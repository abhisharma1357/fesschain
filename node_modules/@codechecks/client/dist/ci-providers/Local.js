"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const execa = require("execa");
const REMOTE_URL_REGEXP = /^git\@github\.com\:(.*)\.git$/;
/**
 * Run codechecks locally, not on CI. It requires running within git reposistory.
 */
class LocalProvider {
    constructor(env, forcedLocalProjectSlug) {
        this.env = env;
        this.forcedLocalProjectSlug = forcedLocalProjectSlug;
    }
    isCurrentlyRunning() {
        const isCI = this.env["CI"];
        return !isCI;
    }
    async getCurrentSha() {
        return await this.getShaForRef("HEAD");
    }
    async getProjectSlug() {
        // allow users to override local project slug
        if (this.forcedLocalProjectSlug) {
            return this.forcedLocalProjectSlug;
        }
        const rawRemoteUrl = (await execa.shell("git config --get remote.origin.url")).stdout.trim();
        const matches = REMOTE_URL_REGEXP.exec(rawRemoteUrl);
        if (!matches || !matches[1]) {
            throw new Error(`Can't get project slug from ${rawRemoteUrl}`);
        }
        const projectSlug = matches[1];
        return projectSlug;
    }
    getPullRequestID() {
        return 0;
    }
    async getPrInfo() {
        return {
            id: 0,
            meta: {
                title: "Local run",
                body: "local run",
            },
            // @todo implement those. It's possible to get it from git
            files: {
                added: [],
                changed: [],
                removed: [],
            },
            head: {
                sha: await this.getCurrentSha(),
            },
            base: {
                // @todo we should have heuristics to detect "main" branch, sometimes it's dev
                sha: await this.getShaForRef("master"),
            },
        };
    }
    async getShaForRef(ref) {
        return (await execa.shell(`git rev-parse ${ref}`)).stdout.trim();
    }
    isFork() {
        return false;
    }
    supportsSpeculativeBranchSelection() {
        return true;
    }
}
exports.LocalProvider = LocalProvider;
function checkIfIsLocalMode(provider) {
    return provider instanceof LocalProvider;
}
exports.checkIfIsLocalMode = checkIfIsLocalMode;
const marked = require("marked");
const TerminalRenderer = require("marked-terminal");
const logger_1 = require("../logger");
const chalk_1 = require("chalk");
marked.setOptions({
    // Define custom renderer
    renderer: new TerminalRenderer(),
});
function printCheck(report) {
    console.log(marked(`
# ${report.status === "success" ? "✅" : "❌"} ${report.name} 
${report.shortDescription}`));
    if (report.longDescription) {
        console.log(marked(`
## Long description: 
${report.longDescription}`));
    }
    logger_1.logger.log(chalk_1.default.dim("---------------"));
    logger_1.logger.log();
}
exports.printCheck = printCheck;
//# sourceMappingURL=Local.js.map