"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const utils_1 = require("./utils");
const Travis_1 = require("../Travis");
describe("Travis", () => {
    const env = utils_1.readEnvFile(path_1.join(__dirname, "__fixtures__", ".travisci.env"));
    const envFork = utils_1.readEnvFile(path_1.join(__dirname, "__fixtures__", ".travisci-fork.env"));
    it("should detect travisci", () => {
        const provider = new Travis_1.Travis(env);
        expect(provider.isCurrentlyRunning()).toBe(true);
    });
    it("should not detect travisci when not running inside travisci", () => {
        const provider = new Travis_1.Travis({});
        expect(provider.isCurrentlyRunning()).toBe(false);
    });
    it("should get pull request id", () => {
        const provider = new Travis_1.Travis(env);
        expect(provider.getPullRequestID()).toBe(18);
    });
    it("should not get pull request id if not running in PR context", () => {
        const env = utils_1.readEnvFile(path_1.join(__dirname, "__fixtures__", ".travisci-nopr.env"));
        const provider = new Travis_1.Travis(env);
        expect(provider.getPullRequestID()).toBe(undefined);
    });
    it("should get target SHA", () => {
        const provider = new Travis_1.Travis(env);
        expect(provider.getCurrentSha()).toBe("aa775e60cfcf836fece903664a5ebc92f464d281");
    });
    it("should not detect fork mode", () => {
        const provider = new Travis_1.Travis(env);
        expect(provider.isFork()).toBe(false);
    });
    it("should detect fork mode", () => {
        const provider = new Travis_1.Travis(envFork);
        expect(provider.isFork()).toBe(true);
    });
});
//# sourceMappingURL=Travis.test.js.map