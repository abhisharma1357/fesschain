"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const utils_1 = require("./utils");
const Circle_1 = require("../Circle");
describe("Circle", () => {
    const env = utils_1.readEnvFile(path_1.join(__dirname, "__fixtures__", ".circleci.env"));
    const envFork = utils_1.readEnvFile(path_1.join(__dirname, "__fixtures__", ".circleci-fork.env"));
    it("should detect circleci", () => {
        const provider = new Circle_1.Circle(env);
        expect(provider.isCurrentlyRunning()).toBe(true);
    });
    it("should not detect circleci when not running inside circleci", () => {
        const provider = new Circle_1.Circle({});
        expect(provider.isCurrentlyRunning()).toBe(false);
    });
    it("should get pull request id", () => {
        const provider = new Circle_1.Circle(env);
        expect(provider.getPullRequestID()).toBe(10);
    });
    it("should not get pull request id if not running in PR context", () => {
        const env = utils_1.readEnvFile(path_1.join(__dirname, "__fixtures__", ".circleci-nopr.env"));
        const provider = new Circle_1.Circle(env);
        expect(provider.getPullRequestID()).toBeUndefined();
    });
    it("should get target SHA", () => {
        const provider = new Circle_1.Circle(env);
        expect(provider.getCurrentSha()).toBe("711a2ba0e24c74b5e818dc0b130912db61e804fe");
    });
    it("should not detect fork mode", () => {
        const provider = new Circle_1.Circle(env);
        expect(provider.isFork()).toBe(false);
    });
    it("should detect fork mode", () => {
        const provider = new Circle_1.Circle(envFork);
        expect(provider.isFork()).toBe(true);
    });
});
//# sourceMappingURL=Circle.test.js.map