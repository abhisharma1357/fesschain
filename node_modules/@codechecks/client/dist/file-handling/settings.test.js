"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mockFS = require("mock-fs");
const path_1 = require("path");
const settings_1 = require("./settings");
const rootVirtualPath = "/app/";
describe("loadCodechecksSettings", () => {
    it("should load default settings if no files were provided", async () => {
        mockFS({
            [path_1.join(rootVirtualPath)]: {},
        });
        const actualSettings = await settings_1.loadCodechecksSettings(rootVirtualPath);
        mockFS.restore();
        expect(actualSettings).toMatchInlineSnapshot(`
Object {
  "branches": Array [
    "master",
  ],
  "speculativeBranchSelection": true,
}
`);
    });
    it("should load settings from codechecks.yml file", async () => {
        mockFS({
            [path_1.join(rootVirtualPath)]: {
                "codechecks.yml": `
checks:
  - not-important-check
settings:
  branches:
    - dev
    - master
`,
            },
        });
        const actualSettings = await settings_1.loadCodechecksSettings(rootVirtualPath);
        mockFS.restore();
        expect(actualSettings).toMatchInlineSnapshot(`
Object {
  "branches": Array [
    "dev",
    "master",
  ],
  "speculativeBranchSelection": true,
}
`);
    });
    it("should load settings from codechecks.json file", async () => {
        mockFS({
            [path_1.join(rootVirtualPath)]: {
                "codechecks.yml": `
{
  "settings": {
    "branches": ["dev", "master"]
  }
}
        
        `,
            },
        });
        const actualSettings = await settings_1.loadCodechecksSettings(rootVirtualPath);
        mockFS.restore();
        expect(actualSettings).toMatchInlineSnapshot(`
Object {
  "branches": Array [
    "dev",
    "master",
  ],
  "speculativeBranchSelection": true,
}
`);
    });
});
//# sourceMappingURL=settings.test.js.map