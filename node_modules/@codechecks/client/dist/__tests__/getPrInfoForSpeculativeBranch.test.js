"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const speculativeBranchSelection_1 = require("../speculativeBranchSelection");
const path_1 = require("path");
const fse = require("fs-extra");
const execa = require("execa");
const repoPath = path_1.join(__dirname, "./dummy-repo");
const indexPath = "index.js";
const indexPathAbs = path_1.join(repoPath, indexPath);
const index2Path = "index2.js";
const index2PathAbs = path_1.join(repoPath, index2Path);
describe("getPrInfoForSpeculativeBranch", () => {
    it("should work when no changes were made", async () => {
        const settings = {
            speculativeBranchSelection: true,
            branches: ["master"],
        };
        await prepareRepo(repoPath);
        const prInfo = await speculativeBranchSelection_1.getPrInfoForSpeculativeBranch(settings, repoPath);
        expect(prInfo).toMatchInlineSnapshot(`undefined`);
    });
    it("should work when with various changes", async () => {
        const settings = {
            speculativeBranchSelection: true,
            branches: ["master"],
        };
        await prepareRepo(repoPath);
        await fse.appendFile(indexPathAbs, `console.log("123!");`);
        await fse.writeFile(index2PathAbs, `console.log("456!");`);
        await makeBranchAndCheckout(repoPath, "feature1");
        await makeCommit(repoPath, "second commit");
        const prInfo = await speculativeBranchSelection_1.getPrInfoForSpeculativeBranch(settings, repoPath);
        const deterministicPrInfo = Object.assign({}, prInfo, { base: {}, head: {} });
        expect(deterministicPrInfo).toMatchInlineSnapshot(`
Object {
  "base": Object {},
  "files": Object {
    "added": Array [
      "index2.js",
    ],
    "changed": Array [
      "index.js",
    ],
    "removed": Array [],
  },
  "head": Object {},
  "id": 0,
  "meta": Object {
    "body": "",
    "title": "",
  },
}
`);
    });
    it("should work when with deleted files", async () => {
        const settings = {
            speculativeBranchSelection: true,
            branches: ["master"],
        };
        await prepareRepo(repoPath);
        await fse.remove(indexPathAbs);
        await makeBranchAndCheckout(repoPath, "feature1");
        await makeCommit(repoPath, "second commit");
        const prInfo = await speculativeBranchSelection_1.getPrInfoForSpeculativeBranch(settings, repoPath);
        const deterministicPrInfo = Object.assign({}, prInfo, { base: {}, head: {} });
        expect(deterministicPrInfo).toMatchInlineSnapshot(`
Object {
  "base": Object {},
  "files": Object {
    "added": Array [],
    "changed": Array [],
    "removed": Array [
      "index.js",
    ],
  },
  "head": Object {},
  "id": 0,
  "meta": Object {
    "body": "",
    "title": "",
  },
}
`);
    });
    it("should work when with moved files", async () => {
        const settings = {
            speculativeBranchSelection: true,
            branches: ["master"],
        };
        await prepareRepo(repoPath);
        await fse.remove(indexPathAbs);
        await fse.writeFile(index2PathAbs, `console.log("Hello world!");`);
        await makeBranchAndCheckout(repoPath, "feature1");
        await makeCommit(repoPath, "second commit");
        const prInfo = await speculativeBranchSelection_1.getPrInfoForSpeculativeBranch(settings, repoPath);
        const deterministicPrInfo = Object.assign({}, prInfo, { base: {}, head: {} });
        expect(deterministicPrInfo).toMatchInlineSnapshot(`
Object {
  "base": Object {},
  "files": Object {
    "added": Array [
      "index2.js",
    ],
    "changed": Array [],
    "removed": Array [
      "index.js",
    ],
  },
  "head": Object {},
  "id": 0,
  "meta": Object {
    "body": "",
    "title": "",
  },
}
`);
    });
});
async function prepareRepo(repoPath) {
    const indexPathAbs = path_1.join(repoPath, indexPath);
    fse.removeSync(repoPath);
    fse.mkdirpSync(repoPath);
    await execa("git init", { shell: true, cwd: repoPath });
    await execa(`git config user.name "Codechecks Test"`, { shell: true, cwd: repoPath });
    await execa(`git config user.email "chris@codechecks.io"`, { shell: true, cwd: repoPath });
    await fse.writeFile(indexPathAbs, `console.log("Hello world!");`);
    await makeCommit(repoPath, "init");
}
async function makeCommit(repoPath, message) {
    await execa("git add -A", { shell: true, cwd: repoPath });
    await execa(`git commit -m "${message}"`, {
        shell: true,
        cwd: repoPath,
    });
}
async function makeBranchAndCheckout(repoPath, branchName) {
    await execa(`git checkout -b ${branchName}`, { shell: true, cwd: repoPath });
}
//# sourceMappingURL=getPrInfoForSpeculativeBranch.test.js.map